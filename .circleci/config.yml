version: 2.1

executors:
  gfortran-large:
    docker:
      - image: gmao/ubuntu20-geos-env-mkl:v6.2.7-openmpi_4.0.6-gcc_11.2.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_AUTH_TOKEN
    environment:
      OMPI_ALLOW_RUN_AS_ROOT: 1
      OMPI_ALLOW_RUN_AS_ROOT_CONFIRM: 1
      OMPI_MCA_btl_vader_single_copy_mechanism: none
    resource_class: large
    #MEDIUM# resource_class: medium

  ifort-large:
    docker:
      - image: gmao/ubuntu20-geos-env:v6.2.7-intelmpi_2021.2.0-intel_2021.2.0
        auth:
          username: $DOCKERHUB_USER
          password: $DOCKERHUB_AUTH_TOKEN
    resource_class: large
    #MEDIUM# resource_class: medium

workflows:
  version: 2.1
  build-and-test:
    jobs:
      - build-GEOSfvdycore:
          name: build-GEOSfvdycore-on-<< matrix.compiler >>
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          context: 
            - docker-hub-creds
      - make-fv3-experiment:
          name: make-fv3-experiment-on-<< matrix.compiler >>
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          requires:
            - build-GEOSfvdycore-on-<< matrix.compiler >>
          context:
            - docker-hub-creds
      - run-fv3-standalone:
          name: run-fv3-standalone-on-<< matrix.compiler >>
          matrix:
            parameters:
              compiler: [gfortran, ifort]
          requires:
            - make-fv3-experiment-on-<< matrix.compiler >>
          context:
            - docker-hub-creds

jobs:
  build-GEOSfvdycore:
    parameters:
      compiler:
        type: string
    executor: << parameters.compiler >>-large
    working_directory: /root/project
    steps:
      - checkout:
          path: GEOSfvdycore
      - run:
          name: "Versions etc"
          command: mpirun --version && << parameters.compiler>> --version && echo $BASEDIR && pwd && ls
      - run:
          name: "Mepo clone external repos"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/GEOSfvdycore
            mepo clone
            mepo status
      - run:
          name: "Mepo checkout-if-exists"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/GEOSfvdycore
            echo "${CIRCLE_BRANCH}"
            if [ "${CIRCLE_BRANCH}" != "develop" ] && [ "${CIRCLE_BRANCH}" != "main" ]
            then
               mepo checkout-if-exists ${CIRCLE_BRANCH}
            fi
            mepo status
      - run:
          name: "CMake"
          command: |
            mkdir -p /logfiles
            cd ${CIRCLE_WORKING_DIRECTORY}/GEOSfvdycore
            mkdir -p  ${CIRCLE_WORKING_DIRECTORY}/workspace/build-GEOSfvdycore
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/build-GEOSfvdycore
            cmake ${CIRCLE_WORKING_DIRECTORY}/GEOSfvdycore -DBASEDIR=$BASEDIR/Linux -DCMAKE_Fortran_COMPILER=<< parameters.compiler >> -DCMAKE_BUILD_TYPE=Debug -DCMAKE_INSTALL_PREFIX=${CIRCLE_WORKING_DIRECTORY}/workspace/install-GEOSfvdycore -DUSE_F2PY=OFF |& tee /logfiles/cmake.log
      - run:
          name: "Build and install"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/build-GEOSfvdycore
            make -j"$(nproc)" install |& tee /logfiles/make.log
            #MEDIUM# make -j4 install |& tee /logfiles/make.log
      - store_artifacts:
          path: /logfiles
      # We need to persist the install for the next step
      # but only if we are running gcm tests
      - persist_to_workspace:
          root: workspace
          paths:
            - install-GEOSfvdycore

  make-fv3-experiment:
    parameters:
      compiler:
        type: string
    executor: << parameters.compiler >>-large
    working_directory: /root/project
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: "Run fv3_setup"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/install-GEOSfvdycore/bin

            INPUT_FOR_SETUP=$(cat \<<END_HEREDOC
            test-fv3-c12
            test-fv3-c12
            12
            72
            NO
            NO
            ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12
            NULL
            END_HEREDOC
            )
            echo "$INPUT_FOR_SETUP" > /tmp/input.txt

            cat /tmp/input.txt | ./fv3_setup
      - run:
          name: "Change FV_NX, FV_NY, and RUN_CMD"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12
            sed -i.bak -e '/set FV_NX/ s/\([0-9]\+\)/1/' -e '/set FV_NY/ s/\([0-9]\+\)/6/' -e '/set RUN_CMD/ c\set RUN_CMD = "mpirun -np "' fv3.j
      - run:
          name: "Cat fv3.j"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12
            cat fv3.j
      # We need to persist the install for the next step
      - persist_to_workspace:
          root: workspace
          paths:
            - test-fv3-c12
      - store_artifacts:
          path: /logfiles

  run-fv3-standalone:
    parameters:
      compiler:
        type: string
    executor: << parameters.compiler >>-large
    working_directory: /root/project
    steps:
      - attach_workspace:
          at: workspace
      - run:
          name: "Run fv3.j"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12
            ./fv3.j
      - run:
          name: "Check for EGRESS"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12

            # The scratch directory for fv3 standalone isn't consistent
            SCRDIR=$(find . -type d -name 'scratch*')

            if [[ -f $SCRDIR/EGRESS ]]
            then
               echo "EGRESS found!"
            else
               echo "EGRESS not found!"
               exit 1
            fi
      - run:
          name: "Copy log files"
          command: |
            cd ${CIRCLE_WORKING_DIRECTORY}/workspace/test-fv3-c12
            cp *.log /logfiles
      - store_artifacts:
          path: /logfiles
